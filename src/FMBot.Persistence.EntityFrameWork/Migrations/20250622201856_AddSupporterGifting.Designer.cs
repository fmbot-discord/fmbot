// <auto-generated />
using System;
using System.Collections.Generic;
using FMBot.Persistence.EntityFrameWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FMBot.Persistence.EntityFrameWork.Migrations
{
    [DbContext(typeof(FMBotDbContext))]
    [Migration("20250622201856_AddSupporterGifting")]
    partial class AddSupporterGifting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.AiGeneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_generated");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Output")
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<string>("Prompt")
                        .HasColumnType("text")
                        .HasColumnName("prompt");

                    b.Property<int?>("TargetedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("targeted_user_id");

                    b.Property<int>("TotalTokens")
                        .HasColumnType("integer")
                        .HasColumnName("total_tokens");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ai_generations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ai_generations_user_id");

                    b.ToTable("ai_generations", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.AiPrompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FreeModel")
                        .HasColumnType("text")
                        .HasColumnName("free_model");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("PremiumModel")
                        .HasColumnType("text")
                        .HasColumnName("premium_model");

                    b.Property<string>("Prompt")
                        .HasColumnType("text")
                        .HasColumnName("prompt");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UltraModel")
                        .HasColumnType("text")
                        .HasColumnName("ultra_model");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_ai_prompts");

                    b.ToTable("ai_prompts", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AppleMusicDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("apple_music_date");

                    b.Property<string>("AppleMusicDescription")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_description");

                    b.Property<int?>("AppleMusicId")
                        .HasColumnType("integer")
                        .HasColumnName("apple_music_id");

                    b.Property<string>("AppleMusicShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_short_description");

                    b.Property<string>("AppleMusicTagline")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_tagline");

                    b.Property<string>("AppleMusicUrl")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_url");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("LastFmDescription")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_description");

                    b.Property<string>("LastFmUrl")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_url");

                    b.Property<DateTime?>("LastfmDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastfm_date");

                    b.Property<string>("LastfmImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("lastfm_image_url");

                    b.Property<Guid?>("Mbid")
                        .HasColumnType("uuid")
                        .HasColumnName("mbid");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int?>("Popularity")
                        .HasColumnType("integer")
                        .HasColumnName("popularity");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("text")
                        .HasColumnName("release_date");

                    b.Property<string>("ReleaseDatePrecision")
                        .HasColumnType("text")
                        .HasColumnName("release_date_precision");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text")
                        .HasColumnName("spotify_id");

                    b.Property<DateTime?>("SpotifyImageDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("spotify_image_date");

                    b.Property<string>("SpotifyImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("spotify_image_url");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Upc")
                        .HasColumnType("text")
                        .HasColumnName("upc");

                    b.HasKey("Id")
                        .HasName("pk_albums");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_albums_artist_id");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.AlbumImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<string>("BgColor")
                        .HasColumnType("text")
                        .HasColumnName("bg_color");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("ImageSource")
                        .HasColumnType("integer")
                        .HasColumnName("image_source");

                    b.Property<int>("ImageType")
                        .HasColumnType("integer")
                        .HasColumnName("image_type");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PreviewFrameUrl")
                        .HasColumnType("text")
                        .HasColumnName("preview_frame_url");

                    b.Property<string>("TextColor1")
                        .HasColumnType("text")
                        .HasColumnName("text_color1");

                    b.Property<string>("TextColor2")
                        .HasColumnType("text")
                        .HasColumnName("text_color2");

                    b.Property<string>("TextColor3")
                        .HasColumnType("text")
                        .HasColumnName("text_color3");

                    b.Property<string>("TextColor4")
                        .HasColumnType("text")
                        .HasColumnName("text_color4");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_album_images");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_album_images_album_id");

                    b.ToTable("album_images", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AppleMusicDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("apple_music_date");

                    b.Property<int?>("AppleMusicId")
                        .HasColumnType("integer")
                        .HasColumnName("apple_music_id");

                    b.Property<string>("AppleMusicUrl")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_url");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<string>("Disambiguation")
                        .HasColumnType("text")
                        .HasColumnName("disambiguation");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("LastFmDescription")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_description");

                    b.Property<string>("LastFmUrl")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_url");

                    b.Property<DateTime?>("LastfmDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastfm_date");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<Guid?>("Mbid")
                        .HasColumnType("uuid")
                        .HasColumnName("mbid");

                    b.Property<DateTime?>("MusicBrainzDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("music_brainz_date");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int?>("Popularity")
                        .HasColumnType("integer")
                        .HasColumnName("popularity");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text")
                        .HasColumnName("spotify_id");

                    b.Property<DateTime?>("SpotifyImageDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("spotify_image_date");

                    b.Property<string>("SpotifyImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("spotify_image_url");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_artists");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<bool>("CorrectsInScrobbles")
                        .HasColumnType("boolean")
                        .HasColumnName("corrects_in_scrobbles");

                    b.Property<int>("Options")
                        .HasColumnType("integer")
                        .HasColumnName("options");

                    b.HasKey("Id")
                        .HasName("pk_artist_aliases");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_artist_aliases_artist_id");

                    b.ToTable("artist_aliases", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_artist_genres");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_artist_genres_artist_id");

                    b.ToTable("artist_genres", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("BgColor")
                        .HasColumnType("text")
                        .HasColumnName("bg_color");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("ImageSource")
                        .HasColumnType("integer")
                        .HasColumnName("image_source");

                    b.Property<int>("ImageType")
                        .HasColumnType("integer")
                        .HasColumnName("image_type");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PreviewFrameUrl")
                        .HasColumnType("text")
                        .HasColumnName("preview_frame_url");

                    b.Property<string>("TextColor1")
                        .HasColumnType("text")
                        .HasColumnName("text_color1");

                    b.Property<string>("TextColor2")
                        .HasColumnType("text")
                        .HasColumnName("text_color2");

                    b.Property<string>("TextColor3")
                        .HasColumnType("text")
                        .HasColumnName("text_color3");

                    b.Property<string>("TextColor4")
                        .HasColumnType("text")
                        .HasColumnName("text_color4");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_artist_images");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_artist_images_artist_id");

                    b.ToTable("artist_images", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<bool>("ManuallyAdded")
                        .HasColumnType("boolean")
                        .HasColumnName("manually_added");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_artist_links");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_artist_links_artist_id");

                    b.ToTable("artist_links", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.BottedUser", b =>
                {
                    b.Property<int>("BottedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("botted_user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BottedUserId"));

                    b.Property<bool>("BanActive")
                        .HasColumnType("boolean")
                        .HasColumnName("ban_active");

                    b.Property<DateTime?>("LastFmRegistered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_fm_registered");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("UserNameLastFM")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.HasKey("BottedUserId")
                        .HasName("pk_botted_users");

                    b.ToTable("botted_users", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.BottedUserReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<decimal?>("ProcessedByDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("processed_by_discord_user_id");

                    b.Property<string>("ProvidedNote")
                        .HasColumnType("text")
                        .HasColumnName("provided_note");

                    b.Property<int>("ReportStatus")
                        .HasColumnType("integer")
                        .HasColumnName("report_status");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reported_at");

                    b.Property<decimal>("ReportedByDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("reported_by_discord_user_id");

                    b.Property<string>("UserNameLastFM")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.HasKey("Id")
                        .HasName("pk_botted_user_report");

                    b.ToTable("botted_user_report", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.CensoredMusic", b =>
                {
                    b.Property<int>("CensoredMusicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("censored_music_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CensoredMusicId"));

                    b.Property<string>("AlbumName")
                        .HasColumnType("text")
                        .HasColumnName("album_name");

                    b.Property<string>("AlternativeCoverUrl")
                        .HasColumnType("text")
                        .HasColumnName("alternative_cover_url");

                    b.Property<bool>("Artist")
                        .HasColumnType("boolean")
                        .HasColumnName("artist");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("artist_name");

                    b.Property<long>("CensorType")
                        .HasColumnType("bigint")
                        .HasColumnName("censor_type");

                    b.Property<bool?>("FeaturedBanOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("featured_ban_only");

                    b.Property<bool>("SafeForCommands")
                        .HasColumnType("boolean")
                        .HasColumnName("safe_for_commands");

                    b.Property<bool>("SafeForFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("safe_for_featured");

                    b.Property<int?>("TimesCensored")
                        .HasColumnType("integer")
                        .HasColumnName("times_censored");

                    b.HasKey("CensoredMusicId")
                        .HasName("pk_censored_music");

                    b.ToTable("censored_music", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.CensoredMusicReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<string>("AlbumName")
                        .HasColumnType("text")
                        .HasColumnName("album_name");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("artist_name");

                    b.Property<bool>("IsArtist")
                        .HasColumnType("boolean")
                        .HasColumnName("is_artist");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<decimal?>("ProcessedByDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("processed_by_discord_user_id");

                    b.Property<string>("ProvidedNote")
                        .HasColumnType("text")
                        .HasColumnName("provided_note");

                    b.Property<int>("ReportStatus")
                        .HasColumnType("integer")
                        .HasColumnName("report_status");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reported_at");

                    b.Property<decimal>("ReportedByDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("reported_by_discord_user_id");

                    b.HasKey("Id")
                        .HasName("pk_censored_music_report");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_censored_music_report_album_id");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_censored_music_report_artist_id");

                    b.ToTable("censored_music_report", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("channel_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChannelId"));

                    b.Property<bool?>("BotDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("bot_disabled");

                    b.Property<string>("DisabledCommands")
                        .HasColumnType("text")
                        .HasColumnName("disabled_commands");

                    b.Property<decimal>("DiscordChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_channel_id");

                    b.Property<int?>("FmCooldown")
                        .HasColumnType("integer")
                        .HasColumnName("fm_cooldown");

                    b.Property<int?>("FmEmbedType")
                        .HasColumnType("integer")
                        .HasColumnName("fm_embed_type");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ChannelId")
                        .HasName("pk_channels");

                    b.HasIndex("DiscordChannelId")
                        .HasDatabaseName("ix_channels_discord_channel_id");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_channels_guild_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsFormatDescriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("citext")
                        .HasColumnName("description");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer")
                        .HasColumnName("release_id");

                    b.HasKey("Id")
                        .HasName("pk_discogs_format_descriptions");

                    b.HasIndex("ReleaseId")
                        .HasDatabaseName("ix_discogs_format_descriptions_release_id");

                    b.ToTable("discogs_format_descriptions", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("citext")
                        .HasColumnName("description");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer")
                        .HasColumnName("release_id");

                    b.HasKey("Id")
                        .HasName("pk_discogs_genre");

                    b.HasIndex("ReleaseId")
                        .HasDatabaseName("ix_discogs_genre_release_id");

                    b.ToTable("discogs_genre", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsRelease", b =>
                {
                    b.Property<int>("DiscogsId")
                        .HasColumnType("integer")
                        .HasColumnName("discogs_id");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<string>("Artist")
                        .HasColumnType("citext")
                        .HasColumnName("artist");

                    b.Property<int>("ArtistDiscogsId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_discogs_id");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_url");

                    b.Property<string>("FeaturingArtist")
                        .HasColumnType("citext")
                        .HasColumnName("featuring_artist");

                    b.Property<int?>("FeaturingArtistDiscogsId")
                        .HasColumnType("integer")
                        .HasColumnName("featuring_artist_discogs_id");

                    b.Property<int?>("FeaturingArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("featuring_artist_id");

                    b.Property<string>("FeaturingArtistJoin")
                        .HasColumnType("text")
                        .HasColumnName("featuring_artist_join");

                    b.Property<string>("Format")
                        .HasColumnType("citext")
                        .HasColumnName("format");

                    b.Property<string>("FormatText")
                        .HasColumnType("text")
                        .HasColumnName("format_text");

                    b.Property<string>("Label")
                        .HasColumnType("citext")
                        .HasColumnName("label");

                    b.Property<decimal?>("LowestPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("lowest_price");

                    b.Property<int?>("MasterId")
                        .HasColumnType("integer")
                        .HasColumnName("master_id");

                    b.Property<string>("SecondLabel")
                        .HasColumnType("text")
                        .HasColumnName("second_label");

                    b.Property<string>("Title")
                        .HasColumnType("citext")
                        .HasColumnName("title");

                    b.Property<int?>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("DiscogsId")
                        .HasName("pk_discogs_releases");

                    b.ToTable("discogs_releases", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("citext")
                        .HasColumnName("description");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer")
                        .HasColumnName("release_id");

                    b.HasKey("Id")
                        .HasName("pk_discogs_style");

                    b.HasIndex("ReleaseId")
                        .HasDatabaseName("ix_discogs_style_release_id");

                    b.ToTable("discogs_style", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.FeaturedLog", b =>
                {
                    b.Property<int>("FeaturedLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("featured_log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeaturedLogId"));

                    b.Property<string>("AlbumName")
                        .HasColumnType("citext")
                        .HasColumnName("album_name");

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<int>("BotType")
                        .HasColumnType("integer")
                        .HasColumnName("bot_type");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FeaturedMode")
                        .HasColumnType("integer")
                        .HasColumnName("featured_mode");

                    b.Property<string>("FullSizeImage")
                        .HasColumnType("text")
                        .HasColumnName("full_size_image");

                    b.Property<bool>("HasFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("has_featured");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool?>("NoUpdate")
                        .HasColumnType("boolean")
                        .HasColumnName("no_update");

                    b.PrimitiveCollection<string[]>("Reactions")
                        .HasColumnType("text[]")
                        .HasColumnName("reactions");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<bool>("SupporterDay")
                        .HasColumnType("boolean")
                        .HasColumnName("supporter_day");

                    b.Property<string>("TrackName")
                        .HasColumnType("citext")
                        .HasColumnName("track_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("FeaturedLogId")
                        .HasName("pk_featured_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_featured_logs_user_id");

                    b.ToTable("featured_logs", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Friend", b =>
                {
                    b.Property<int>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("friend_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FriendId"));

                    b.Property<int?>("FriendUserId")
                        .HasColumnType("integer")
                        .HasColumnName("friend_user_id");

                    b.Property<string>("LastFMUserName")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_user_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("FriendId")
                        .HasName("pk_friends");

                    b.HasIndex("FriendUserId")
                        .HasDatabaseName("ix_friends_friend_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_friends_user_id");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.GlobalFilteredUser", b =>
                {
                    b.Property<int>("GlobalFilteredUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("global_filtered_user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GlobalFilteredUserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("MonthLength")
                        .HasColumnType("integer")
                        .HasColumnName("month_length");

                    b.Property<DateTime?>("OccurrenceEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurrence_end");

                    b.Property<DateTime?>("OccurrenceStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurrence_start");

                    b.Property<int>("Reason")
                        .HasColumnType("integer")
                        .HasColumnName("reason");

                    b.Property<int?>("ReasonAmount")
                        .HasColumnType("integer")
                        .HasColumnName("reason_amount");

                    b.Property<DateTime?>("RegisteredLastFm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_last_fm");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("UserNameLastFm")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.HasKey("GlobalFilteredUserId")
                        .HasName("pk_global_filtered_users");

                    b.ToTable("global_filtered_users", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Guild", b =>
                {
                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuildId"));

                    b.Property<int?>("ActivityThresholdDays")
                        .HasColumnType("integer")
                        .HasColumnName("activity_threshold_days");

                    b.PrimitiveCollection<decimal[]>("AllowedRoles")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("allowed_roles");

                    b.Property<int?>("AutomaticCrownSeeder")
                        .HasColumnType("integer")
                        .HasColumnName("automatic_crown_seeder");

                    b.PrimitiveCollection<decimal[]>("BlockedRoles")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("blocked_roles");

                    b.PrimitiveCollection<decimal[]>("BotManagementRoles")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("bot_management_roles");

                    b.Property<int?>("CrownsActivityThresholdDays")
                        .HasColumnType("integer")
                        .HasColumnName("crowns_activity_threshold_days");

                    b.Property<bool?>("CrownsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("crowns_disabled");

                    b.Property<int?>("CrownsMinimumPlaycountThreshold")
                        .HasColumnType("integer")
                        .HasColumnName("crowns_minimum_playcount_threshold");

                    b.Property<string>("CustomLogo")
                        .HasColumnType("text")
                        .HasColumnName("custom_logo");

                    b.Property<bool?>("DisableSupporterMessages")
                        .HasColumnType("boolean")
                        .HasColumnName("disable_supporter_messages");

                    b.Property<string>("DisabledCommands")
                        .HasColumnType("text")
                        .HasColumnName("disabled_commands");

                    b.Property<decimal>("DiscordGuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_guild_id");

                    b.Property<string>("EmoteReactions")
                        .HasColumnType("text")
                        .HasColumnName("emote_reactions");

                    b.PrimitiveCollection<decimal[]>("FilterRoles")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("filter_roles");

                    b.Property<int?>("FmEmbedType")
                        .HasColumnType("integer")
                        .HasColumnName("fm_embed_type");

                    b.Property<long?>("GuildFlags")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_flags");

                    b.Property<DateTime?>("LastCrownSeed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_crown_seed");

                    b.Property<DateTime?>("LastIndexed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_indexed");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<bool?>("SpecialGuild")
                        .HasColumnType("boolean")
                        .HasColumnName("special_guild");

                    b.Property<int?>("UserActivityThresholdDays")
                        .HasColumnType("integer")
                        .HasColumnName("user_activity_threshold_days");

                    b.Property<decimal?>("WhoKnowsWhitelistRoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("who_knows_whitelist_role_id");

                    b.HasKey("GuildId")
                        .HasName("pk_guilds");

                    b.HasIndex("DiscordGuildId")
                        .HasDatabaseName("ix_guilds_discord_guild_id");

                    b.ToTable("guilds", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.GuildBlockedUser", b =>
                {
                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("BlockedFromCrowns")
                        .HasColumnType("boolean")
                        .HasColumnName("blocked_from_crowns");

                    b.Property<bool>("BlockedFromWhoKnows")
                        .HasColumnType("boolean")
                        .HasColumnName("blocked_from_who_knows");

                    b.Property<bool>("SelfBlockFromWhoKnows")
                        .HasColumnType("boolean")
                        .HasColumnName("self_block_from_who_knows");

                    b.HasKey("GuildId", "UserId")
                        .HasName("pk_guild_blocked_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_guild_blocked_users_user_id");

                    b.ToTable("guild_blocked_users", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.GuildUser", b =>
                {
                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool?>("Bot")
                        .HasColumnType("boolean")
                        .HasColumnName("bot");

                    b.Property<DateTime?>("LastMessage")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_message");

                    b.PrimitiveCollection<decimal[]>("Roles")
                        .HasColumnType("numeric(20,0)[]")
                        .HasColumnName("roles");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<bool?>("WhoKnowsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("who_knows_blocked");

                    b.Property<bool?>("WhoKnowsWhitelisted")
                        .HasColumnType("boolean")
                        .HasColumnName("who_knows_whitelisted");

                    b.HasKey("GuildId", "UserId")
                        .HasName("pk_guild_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_guild_users_user_id");

                    b.ToTable("guild_users", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.InactiveUserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("ResponseStatus")
                        .HasColumnType("integer")
                        .HasColumnName("response_status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("UserNameLastFM")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.HasKey("Id")
                        .HasName("pk_inactive_user_log");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_inactive_user_log_user_id");

                    b.ToTable("inactive_user_log", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.InactiveUsers", b =>
                {
                    b.Property<int>("InactiveUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inactive_user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InactiveUserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("FailureErrorCount")
                        .HasColumnType("integer")
                        .HasColumnName("failure_error_count");

                    b.Property<int?>("MissingParametersErrorCount")
                        .HasColumnType("integer")
                        .HasColumnName("missing_parameters_error_count");

                    b.Property<int?>("NoScrobblesErrorCount")
                        .HasColumnType("integer")
                        .HasColumnName("no_scrobbles_error_count");

                    b.Property<int?>("RecentTracksPrivateCount")
                        .HasColumnType("integer")
                        .HasColumnName("recent_tracks_private_count");

                    b.Property<bool?>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer")
                        .HasColumnName("user_id1");

                    b.Property<string>("UserNameLastFM")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.HasKey("InactiveUserId")
                        .HasName("pk_inactive_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_inactive_users_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_inactive_users_user_id1");

                    b.ToTable("inactive_users", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.JumbleSession", b =>
                {
                    b.Property<int>("JumbleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("jumble_session_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JumbleSessionId"));

                    b.Property<string>("AlbumName")
                        .HasColumnType("text")
                        .HasColumnName("album_name");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("artist_name");

                    b.Property<float?>("BlurLevel")
                        .HasColumnType("real")
                        .HasColumnName("blur_level");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("text")
                        .HasColumnName("correct_answer");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_ended");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_started");

                    b.Property<decimal?>("DiscordChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_channel_id");

                    b.Property<decimal?>("DiscordGuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_guild_id");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<decimal?>("DiscordResponseId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_response_id");

                    b.Property<int>("JumbleType")
                        .HasColumnType("integer")
                        .HasColumnName("jumble_type");

                    b.Property<string>("JumbledArtist")
                        .HasColumnType("text")
                        .HasColumnName("jumbled_artist");

                    b.Property<int>("Reshuffles")
                        .HasColumnType("integer")
                        .HasColumnName("reshuffles");

                    b.Property<int>("StarterUserId")
                        .HasColumnType("integer")
                        .HasColumnName("starter_user_id");

                    b.HasKey("JumbleSessionId")
                        .HasName("pk_jumble_sessions");

                    b.ToTable("jumble_sessions", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.JumbleSessionAnswer", b =>
                {
                    b.Property<int>("JumbleSessionAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("jumble_session_answer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JumbleSessionAnswerId"));

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean")
                        .HasColumnName("correct");

                    b.Property<DateTime>("DateAnswered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_answered");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<int>("JumbleSessionId")
                        .HasColumnType("integer")
                        .HasColumnName("jumble_session_id");

                    b.HasKey("JumbleSessionAnswerId")
                        .HasName("pk_jumble_session_answers");

                    b.HasIndex("JumbleSessionId")
                        .HasDatabaseName("ix_jumble_session_answers_jumble_session_id");

                    b.ToTable("jumble_session_answers", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.JumbleSessionHint", b =>
                {
                    b.Property<int>("JumbleSessionHintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("jumble_session_hint_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JumbleSessionHintId"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool>("HintShown")
                        .HasColumnType("boolean")
                        .HasColumnName("hint_shown");

                    b.Property<int>("JumbleSessionId")
                        .HasColumnType("integer")
                        .HasColumnName("jumble_session_id");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("JumbleSessionHintId")
                        .HasName("pk_jumble_session_hint");

                    b.HasIndex("JumbleSessionId")
                        .HasDatabaseName("ix_jumble_session_hint_jumble_session_id");

                    b.ToTable("jumble_session_hint", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Supporter", b =>
                {
                    b.Property<int>("SupporterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("supporter_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupporterId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<decimal?>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<bool?>("Expired")
                        .HasColumnType("boolean")
                        .HasColumnName("expired");

                    b.Property<DateTime?>("LastPayment")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_payment");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("OpenCollectiveId")
                        .HasColumnType("text")
                        .HasColumnName("open_collective_id");

                    b.Property<int?>("SubscriptionType")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_type");

                    b.Property<bool>("SupporterMessagesEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("supporter_messages_enabled");

                    b.Property<int>("SupporterType")
                        .HasColumnType("integer")
                        .HasColumnName("supporter_type");

                    b.Property<bool>("VisibleInOverview")
                        .HasColumnType("boolean")
                        .HasColumnName("visible_in_overview");

                    b.HasKey("SupporterId")
                        .HasName("pk_supporters");

                    b.ToTable("supporters", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Acousticness")
                        .HasColumnType("real")
                        .HasColumnName("acousticness");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<string>("AlbumName")
                        .HasColumnType("citext")
                        .HasColumnName("album_name");

                    b.Property<DateTime?>("AppleMusicDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("apple_music_date");

                    b.Property<string>("AppleMusicDescription")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_description");

                    b.Property<int?>("AppleMusicId")
                        .HasColumnType("integer")
                        .HasColumnName("apple_music_id");

                    b.Property<string>("AppleMusicPreviewUrl")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_preview_url");

                    b.Property<string>("AppleMusicShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_short_description");

                    b.Property<string>("AppleMusicTagline")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_tagline");

                    b.Property<string>("AppleMusicUrl")
                        .HasColumnType("text")
                        .HasColumnName("apple_music_url");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<float?>("Danceability")
                        .HasColumnType("real")
                        .HasColumnName("danceability");

                    b.Property<int?>("DurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("duration_ms");

                    b.Property<float?>("Energy")
                        .HasColumnType("real")
                        .HasColumnName("energy");

                    b.Property<float?>("Instrumentalness")
                        .HasColumnType("real")
                        .HasColumnName("instrumentalness");

                    b.Property<string>("Isrc")
                        .HasColumnType("text")
                        .HasColumnName("isrc");

                    b.Property<int?>("Key")
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    b.Property<string>("LastFmDescription")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_description");

                    b.Property<string>("LastFmUrl")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_url");

                    b.Property<DateTime?>("LastfmDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastfm_date");

                    b.Property<float?>("Liveness")
                        .HasColumnType("real")
                        .HasColumnName("liveness");

                    b.Property<float?>("Loudness")
                        .HasColumnType("real")
                        .HasColumnName("loudness");

                    b.Property<DateTime?>("LyricsDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lyrics_date");

                    b.Property<Guid?>("Mbid")
                        .HasColumnType("uuid")
                        .HasColumnName("mbid");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<string>("PlainLyrics")
                        .HasColumnType("text")
                        .HasColumnName("plain_lyrics");

                    b.Property<int?>("Popularity")
                        .HasColumnType("integer")
                        .HasColumnName("popularity");

                    b.Property<float?>("Speechiness")
                        .HasColumnType("real")
                        .HasColumnName("speechiness");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text")
                        .HasColumnName("spotify_id");

                    b.Property<DateTime?>("SpotifyLastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("spotify_last_updated");

                    b.Property<string>("SpotifyPreviewUrl")
                        .HasColumnType("text")
                        .HasColumnName("spotify_preview_url");

                    b.Property<float?>("Tempo")
                        .HasColumnType("real")
                        .HasColumnName("tempo");

                    b.Property<float?>("Valence")
                        .HasColumnType("real")
                        .HasColumnName("valence");

                    b.HasKey("Id")
                        .HasName("pk_tracks");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_tracks_album_id");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_tracks_artist_id");

                    b.ToTable("tracks", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.TrackSyncedLyrics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<TimeSpan>("Timestamp")
                        .HasColumnType("interval")
                        .HasColumnName("timestamp");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer")
                        .HasColumnName("track_id");

                    b.HasKey("Id")
                        .HasName("pk_track_synced_lyrics");

                    b.HasIndex("TrackId")
                        .HasDatabaseName("ix_track_synced_lyrics_track_id");

                    b.ToTable("track_synced_lyrics", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<bool?>("Blocked")
                        .HasColumnType("boolean")
                        .HasColumnName("blocked");

                    b.Property<int>("DataSource")
                        .HasColumnType("integer")
                        .HasColumnName("data_source");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<string>("EmoteReactions")
                        .HasColumnType("text")
                        .HasColumnName("emote_reactions");

                    b.Property<int>("FmEmbedType")
                        .HasColumnType("integer")
                        .HasColumnName("fm_embed_type");

                    b.Property<long>("FmFooterOptions")
                        .HasColumnType("bigint")
                        .HasColumnName("fm_footer_options");

                    b.Property<DateTime?>("LastIndexed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_indexed");

                    b.Property<DateTime?>("LastScrobbleUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_scrobble_update");

                    b.Property<DateTime?>("LastSmallIndexed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_small_indexed");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used");

                    b.Property<bool?>("LastfmPro")
                        .HasColumnType("boolean")
                        .HasColumnName("lastfm_pro");

                    b.Property<int?>("Mode")
                        .HasColumnType("integer")
                        .HasColumnName("mode");

                    b.Property<bool?>("MusicBotTrackingDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("music_bot_tracking_disabled");

                    b.Property<int?>("NumberFormat")
                        .HasColumnType("integer")
                        .HasColumnName("number_format");

                    b.Property<int>("PrivacyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("privacy_level");

                    b.Property<DateTime?>("RegisteredLastFm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_last_fm");

                    b.Property<bool?>("RymEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("rym_enabled");

                    b.Property<string>("SessionKeyLastFm")
                        .HasColumnType("text")
                        .HasColumnName("session_key_last_fm");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.Property<long?>("TotalPlaycount")
                        .HasColumnType("bigint")
                        .HasColumnName("total_playcount");

                    b.Property<string>("UserNameLastFM")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("DiscordUserId")
                        .HasDatabaseName("ix_users_discord_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_users_user_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserAlbum", b =>
                {
                    b.Property<long>("UserAlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_album_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserAlbumId"));

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int>("Playcount")
                        .HasColumnType("integer")
                        .HasColumnName("playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserAlbumId")
                        .HasName("pk_user_albums");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_albums_user_id");

                    b.ToTable("user_albums", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserArtist", b =>
                {
                    b.Property<long>("UserArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_artist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserArtistId"));

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int>("Playcount")
                        .HasColumnType("integer")
                        .HasColumnName("playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserArtistId")
                        .HasName("pk_user_artists");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_artists_user_id");

                    b.ToTable("user_artists", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserCrown", b =>
                {
                    b.Property<int>("CrownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("crown_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CrownId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CurrentPlaycount")
                        .HasColumnType("integer")
                        .HasColumnName("current_playcount");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<bool>("SeededCrown")
                        .HasColumnType("boolean")
                        .HasColumnName("seeded_crown");

                    b.Property<int>("StartPlaycount")
                        .HasColumnType("integer")
                        .HasColumnName("start_playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("CrownId")
                        .HasName("pk_user_crowns");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_user_crowns_guild_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_crowns_user_id");

                    b.ToTable("user_crowns", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserDiscogs", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<string>("AccessTokenSecret")
                        .HasColumnType("text")
                        .HasColumnName("access_token_secret");

                    b.Property<int>("DiscogsId")
                        .HasColumnType("integer")
                        .HasColumnName("discogs_id");

                    b.Property<bool?>("HideValue")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_value");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("MaximumValue")
                        .HasColumnType("text")
                        .HasColumnName("maximum_value");

                    b.Property<string>("MedianValue")
                        .HasColumnType("text")
                        .HasColumnName("median_value");

                    b.Property<string>("MinimumValue")
                        .HasColumnType("text")
                        .HasColumnName("minimum_value");

                    b.Property<DateTime?>("ReleasesLastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("releases_last_updated");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("pk_user_discogs");

                    b.ToTable("user_discogs", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserDiscogsReleases", b =>
                {
                    b.Property<int>("UserDiscogsReleaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_discogs_release_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserDiscogsReleaseId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("instance_id");

                    b.Property<string>("Quantity")
                        .HasColumnType("text")
                        .HasColumnName("quantity");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer")
                        .HasColumnName("release_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserDiscogsReleaseId")
                        .HasName("pk_user_discogs_releases");

                    b.HasIndex("ReleaseId")
                        .HasDatabaseName("ix_user_discogs_releases_release_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_discogs_releases_user_id");

                    b.ToTable("user_discogs_releases", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserInteraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Album")
                        .HasColumnType("text")
                        .HasColumnName("album");

                    b.Property<string>("Artist")
                        .HasColumnType("text")
                        .HasColumnName("artist");

                    b.Property<string>("CommandContent")
                        .HasColumnType("text")
                        .HasColumnName("command_content");

                    b.Property<string>("CommandName")
                        .HasColumnType("text")
                        .HasColumnName("command_name");

                    b.Property<Dictionary<string, string>>("CommandOptions")
                        .HasColumnType("hstore")
                        .HasColumnName("command_options");

                    b.Property<decimal?>("DiscordChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_channel_id");

                    b.Property<decimal?>("DiscordGuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_guild_id");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<decimal?>("DiscordResponseId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_response_id");

                    b.Property<string>("ErrorContent")
                        .HasColumnType("text")
                        .HasColumnName("error_content");

                    b.Property<string>("ErrorReferenceId")
                        .HasColumnType("text")
                        .HasColumnName("error_reference_id");

                    b.Property<bool?>("HintShown")
                        .HasColumnType("boolean")
                        .HasColumnName("hint_shown");

                    b.Property<int>("Response")
                        .HasColumnType("integer")
                        .HasColumnName("response");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Track")
                        .HasColumnType("text")
                        .HasColumnName("track");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_interactions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_interactions_user_id");

                    b.ToTable("user_interactions", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserPlay", b =>
                {
                    b.Property<long>("UserPlayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_play_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserPlayId"));

                    b.Property<string>("AlbumName")
                        .HasColumnType("citext")
                        .HasColumnName("album_name");

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<long?>("MsPlayed")
                        .HasColumnType("bigint")
                        .HasColumnName("ms_played");

                    b.Property<int?>("PlaySource")
                        .HasColumnType("integer")
                        .HasColumnName("play_source");

                    b.Property<DateTime>("TimePlayed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_played");

                    b.Property<string>("TrackName")
                        .HasColumnType("citext")
                        .HasColumnName("track_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserPlayId")
                        .HasName("pk_user_plays");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_plays_user_id");

                    b.ToTable("user_plays", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserStreak", b =>
                {
                    b.Property<long>("UserStreakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_streak_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserStreakId"));

                    b.Property<string>("AlbumName")
                        .HasColumnType("citext")
                        .HasColumnName("album_name");

                    b.Property<int?>("AlbumPlaycount")
                        .HasColumnType("integer")
                        .HasColumnName("album_playcount");

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<int?>("ArtistPlaycount")
                        .HasColumnType("integer")
                        .HasColumnName("artist_playcount");

                    b.Property<DateTime>("StreakEnded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("streak_ended");

                    b.Property<DateTime>("StreakStarted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("streak_started");

                    b.Property<string>("TrackName")
                        .HasColumnType("citext")
                        .HasColumnName("track_name");

                    b.Property<int?>("TrackPlaycount")
                        .HasColumnType("integer")
                        .HasColumnName("track_playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserStreakId")
                        .HasName("pk_user_streaks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_streaks_user_id");

                    b.ToTable("user_streaks", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserTrack", b =>
                {
                    b.Property<long>("UserTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_track_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserTrackId"));

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int>("Playcount")
                        .HasColumnType("integer")
                        .HasColumnName("playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserTrackId")
                        .HasName("pk_user_tracks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_tracks_user_id");

                    b.ToTable("user_tracks", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Webhook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BotType")
                        .HasColumnType("integer")
                        .HasColumnName("bot_type");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<decimal?>("DiscordThreadId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_thread_id");

                    b.Property<decimal>("DiscordWebhookId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_webhook_id");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("pk_webhooks");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_webhooks_guild_id");

                    b.ToTable("webhooks", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.StripePricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByePromo")
                        .HasColumnType("text")
                        .HasColumnName("bye_promo");

                    b.Property<string>("ByePromoSubText")
                        .HasColumnType("text")
                        .HasColumnName("bye_promo_sub_text");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("LifetimePriceId")
                        .HasColumnType("text")
                        .HasColumnName("lifetime_price_id");

                    b.Property<string>("LifetimePriceString")
                        .HasColumnType("text")
                        .HasColumnName("lifetime_price_string");

                    b.Property<string>("LifetimeSubText")
                        .HasColumnType("text")
                        .HasColumnName("lifetime_sub_text");

                    b.Property<string>("LifetimeSummary")
                        .HasColumnType("text")
                        .HasColumnName("lifetime_summary");

                    b.Property<string>("Locales")
                        .HasColumnType("text")
                        .HasColumnName("locales");

                    b.Property<string>("MonthlyPriceId")
                        .HasColumnType("text")
                        .HasColumnName("monthly_price_id");

                    b.Property<string>("MonthlyPriceString")
                        .HasColumnType("text")
                        .HasColumnName("monthly_price_string");

                    b.Property<string>("MonthlySubText")
                        .HasColumnType("text")
                        .HasColumnName("monthly_sub_text");

                    b.Property<string>("MonthlySummary")
                        .HasColumnType("text")
                        .HasColumnName("monthly_summary");

                    b.Property<string>("QuarterlyPriceId")
                        .HasColumnType("text")
                        .HasColumnName("quarterly_price_id");

                    b.Property<string>("QuarterlyPriceString")
                        .HasColumnType("text")
                        .HasColumnName("quarterly_price_string");

                    b.Property<string>("QuarterlySubText")
                        .HasColumnType("text")
                        .HasColumnName("quarterly_sub_text");

                    b.Property<string>("QuarterlySummary")
                        .HasColumnType("text")
                        .HasColumnName("quarterly_summary");

                    b.Property<string>("TwoYearPriceId")
                        .HasColumnType("text")
                        .HasColumnName("two_year_price_id");

                    b.Property<string>("TwoYearPriceString")
                        .HasColumnType("text")
                        .HasColumnName("two_year_price_string");

                    b.Property<string>("TwoYearSubText")
                        .HasColumnType("text")
                        .HasColumnName("two_year_sub_text");

                    b.Property<string>("TwoYearSummary")
                        .HasColumnType("text")
                        .HasColumnName("two_year_summary");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("YearlyPriceId")
                        .HasColumnType("text")
                        .HasColumnName("yearly_price_id");

                    b.Property<string>("YearlyPriceString")
                        .HasColumnType("text")
                        .HasColumnName("yearly_price_string");

                    b.Property<string>("YearlySubText")
                        .HasColumnType("text")
                        .HasColumnName("yearly_sub_text");

                    b.Property<string>("YearlySummary")
                        .HasColumnType("text")
                        .HasColumnName("yearly_summary");

                    b.HasKey("Id")
                        .HasName("pk_stripe_pricing");

                    b.ToTable("stripe_pricing", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.StripeSupporter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DateEnding")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_ending");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_started");

                    b.Property<bool>("EntitlementDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("entitlement_deleted");

                    b.Property<decimal?>("GiftReceiverDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("gift_receiver_discord_user_id");

                    b.Property<string>("GiftReceiverLastFmUserName")
                        .HasColumnType("text")
                        .HasColumnName("gift_receiver_last_fm_user_name");

                    b.Property<DateTime?>("LastTimeTransferred")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_time_transferred");

                    b.Property<string>("PurchaseSource")
                        .HasColumnType("text")
                        .HasColumnName("purchase_source");

                    b.Property<decimal>("PurchaserDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("purchaser_discord_user_id");

                    b.Property<string>("PurchaserLastFmUserName")
                        .HasColumnType("text")
                        .HasColumnName("purchaser_last_fm_user_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text")
                        .HasColumnName("stripe_customer_id");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text")
                        .HasColumnName("stripe_subscription_id");

                    b.Property<int?>("TimesTransferred")
                        .HasColumnType("integer")
                        .HasColumnName("times_transferred");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_stripe_supporters");

                    b.ToTable("stripe_supporters", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<int>("BotType")
                        .HasColumnType("integer")
                        .HasColumnName("bot_type");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Scope")
                        .HasColumnType("text")
                        .HasColumnName("scope");

                    b.Property<DateTime>("TokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expires_at");

                    b.HasKey("Id")
                        .HasName("pk_user_tokens");

                    b.HasIndex("DiscordUserId")
                        .HasDatabaseName("ix_user_tokens_discord_user_id");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.AiGeneration", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("AiGenerations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ai_generations_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Album", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_albums_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.AlbumImage", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Album", "Album")
                        .WithMany("Images")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_images_albums_album_id");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistAlias", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("ArtistAliases")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artist_aliases_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistGenre", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artist_genres_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistImage", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("Images")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artist_images_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistLink", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("ArtistLinks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artist_links_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.CensoredMusicReport", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("fk_censored_music_report_albums_album_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_censored_music_report_artists_artist_id");

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Channel", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channels_guilds_guild_id");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsFormatDescriptions", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.DiscogsRelease", "DiscogsRelease")
                        .WithMany("FormatDescriptions")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discogs_format_descriptions_discogs_releases_release_id");

                    b.Navigation("DiscogsRelease");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsGenre", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.DiscogsRelease", "DiscogsRelease")
                        .WithMany("Genres")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discogs_genre_discogs_releases_release_id");

                    b.Navigation("DiscogsRelease");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsStyle", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.DiscogsRelease", "DiscogsRelease")
                        .WithMany("Styles")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discogs_style_discogs_releases_release_id");

                    b.Navigation("DiscogsRelease");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.FeaturedLog", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("FeaturedLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_featured_logs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Friend", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "FriendUser")
                        .WithMany("FriendedByUsers")
                        .HasForeignKey("FriendUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK.Friends.Users_FriendUserID");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK.Friends.Users_UserID");

                    b.Navigation("FriendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.GuildBlockedUser", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Guild", "Guild")
                        .WithMany("GuildBlockedUsers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guild_blocked_users_guilds_guild_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("GuildBlockedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guild_blocked_users_users_user_id");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.GuildUser", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Guild", "Guild")
                        .WithMany("GuildUsers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guild_users_guilds_guild_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("GuildUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guild_users_users_user_id");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.InactiveUserLog", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inactive_user_log_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.InactiveUsers", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_inactive_users_users_user_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_inactive_users_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.JumbleSessionAnswer", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.JumbleSession", "JumbleSession")
                        .WithMany("Answers")
                        .HasForeignKey("JumbleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jumble_session_answers_jumble_sessions_jumble_session_id");

                    b.Navigation("JumbleSession");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.JumbleSessionHint", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.JumbleSession", "JumbleSession")
                        .WithMany("Hints")
                        .HasForeignKey("JumbleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jumble_session_hint_jumble_sessions_jumble_session_id");

                    b.Navigation("JumbleSession");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Track", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("fk_tracks_albums_album_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_tracks_artists_artist_id");

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.TrackSyncedLyrics", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Track", "Track")
                        .WithMany("SyncedLyrics")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_track_synced_lyrics_tracks_track_id");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserAlbum", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_albums_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserArtist", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Artists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_artists_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserCrown", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Guild", "Guild")
                        .WithMany("GuildCrowns")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_crowns_guilds_guild_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Crowns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_crowns_users_user_id");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserDiscogs", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithOne("UserDiscogs")
                        .HasForeignKey("FMBot.Persistence.Domain.Models.UserDiscogs", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_discogs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserDiscogsReleases", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.DiscogsRelease", "Release")
                        .WithMany("UserDiscogsReleases")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_discogs_releases_discogs_releases_release_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("DiscogsReleases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_discogs_releases_users_user_id");

                    b.Navigation("Release");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserInteraction", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Interactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_interactions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserPlay", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Plays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_plays_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserStreak", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Streaks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_streaks_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserTrack", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Tracks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tracks_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Webhook", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Guild", "Guild")
                        .WithMany("Webhooks")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_webhooks_guilds_guild_id");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Album", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("ArtistAliases");

                    b.Navigation("ArtistGenres");

                    b.Navigation("ArtistLinks");

                    b.Navigation("Images");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.DiscogsRelease", b =>
                {
                    b.Navigation("FormatDescriptions");

                    b.Navigation("Genres");

                    b.Navigation("Styles");

                    b.Navigation("UserDiscogsReleases");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Guild", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("GuildBlockedUsers");

                    b.Navigation("GuildCrowns");

                    b.Navigation("GuildUsers");

                    b.Navigation("Webhooks");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.JumbleSession", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Hints");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Track", b =>
                {
                    b.Navigation("SyncedLyrics");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.User", b =>
                {
                    b.Navigation("AiGenerations");

                    b.Navigation("Albums");

                    b.Navigation("Artists");

                    b.Navigation("Crowns");

                    b.Navigation("DiscogsReleases");

                    b.Navigation("FeaturedLogs");

                    b.Navigation("FriendedByUsers");

                    b.Navigation("Friends");

                    b.Navigation("GuildBlockedUsers");

                    b.Navigation("GuildUsers");

                    b.Navigation("Interactions");

                    b.Navigation("Plays");

                    b.Navigation("Streaks");

                    b.Navigation("Tracks");

                    b.Navigation("UserDiscogs");
                });
#pragma warning restore 612, 618
        }
    }
}
